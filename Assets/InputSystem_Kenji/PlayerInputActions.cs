//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem_Kenji/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player2Controller"",
            ""id"": ""57776ca7-8ff7-4268-94ed-ddf99190f1d2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""4c22d7a6-8590-4beb-aaf6-a3829cd533ea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""88e02778-0a75-4cec-a0b2-2378a4543af4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""11c5623b-0421-47b3-9deb-e8db3ea4f3ea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleSafety"",
                    ""type"": ""Button"",
                    ""id"": ""f8e04e3a-3daa-4f87-9e82-449c0691dbf4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c7b57b7a-d75b-4878-8e9f-de4e55f0dc04"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""87005649-9d78-4bbb-bab1-6f6386cf4938"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""ac5e2ac1-6297-447e-8597-97049e82341c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""NextTarget"",
                    ""type"": ""Button"",
                    ""id"": ""9871a5a8-c82a-4319-90a7-703beb4f03c0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousTarget"",
                    ""type"": ""Button"",
                    ""id"": ""616a956c-37cc-49f5-bff7-4af091e262bd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""de5b5500-7318-4be3-b4fc-6d64dd3fc612"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b50e1b6-aa69-49c2-bbc6-1edd0eeff791"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bae07ec0-2a39-4e51-b785-539b2b17f85c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d523679-23c4-488d-b6b9-cc4138598ee6"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSafety"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2388e2b9-d156-4275-8177-388e5c47e182"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ec01937-7f66-472b-a557-65d6ceaa79a4"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b703d788-2fcc-41e1-accc-2d183a4dcfac"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7dbef64c-d76e-4b92-9661-19f9c15fc3ff"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5facd469-6069-4d25-8f71-bd744fd3f06a"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player2Controller
        m_Player2Controller = asset.FindActionMap("Player2Controller", throwIfNotFound: true);
        m_Player2Controller_Movement = m_Player2Controller.FindAction("Movement", throwIfNotFound: true);
        m_Player2Controller_Attack = m_Player2Controller.FindAction("Attack", throwIfNotFound: true);
        m_Player2Controller_Pickup = m_Player2Controller.FindAction("Pickup", throwIfNotFound: true);
        m_Player2Controller_ToggleSafety = m_Player2Controller.FindAction("ToggleSafety", throwIfNotFound: true);
        m_Player2Controller_Interact = m_Player2Controller.FindAction("Interact", throwIfNotFound: true);
        m_Player2Controller_Throw = m_Player2Controller.FindAction("Throw", throwIfNotFound: true);
        m_Player2Controller_Aim = m_Player2Controller.FindAction("Aim", throwIfNotFound: true);
        m_Player2Controller_NextTarget = m_Player2Controller.FindAction("NextTarget", throwIfNotFound: true);
        m_Player2Controller_PreviousTarget = m_Player2Controller.FindAction("PreviousTarget", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_Player2Controller.enabled, "This will cause a leak and performance issues, PlayerInputActions.Player2Controller.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player2Controller
    private readonly InputActionMap m_Player2Controller;
    private List<IPlayer2ControllerActions> m_Player2ControllerActionsCallbackInterfaces = new List<IPlayer2ControllerActions>();
    private readonly InputAction m_Player2Controller_Movement;
    private readonly InputAction m_Player2Controller_Attack;
    private readonly InputAction m_Player2Controller_Pickup;
    private readonly InputAction m_Player2Controller_ToggleSafety;
    private readonly InputAction m_Player2Controller_Interact;
    private readonly InputAction m_Player2Controller_Throw;
    private readonly InputAction m_Player2Controller_Aim;
    private readonly InputAction m_Player2Controller_NextTarget;
    private readonly InputAction m_Player2Controller_PreviousTarget;
    public struct Player2ControllerActions
    {
        private @PlayerInputActions m_Wrapper;
        public Player2ControllerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player2Controller_Movement;
        public InputAction @Attack => m_Wrapper.m_Player2Controller_Attack;
        public InputAction @Pickup => m_Wrapper.m_Player2Controller_Pickup;
        public InputAction @ToggleSafety => m_Wrapper.m_Player2Controller_ToggleSafety;
        public InputAction @Interact => m_Wrapper.m_Player2Controller_Interact;
        public InputAction @Throw => m_Wrapper.m_Player2Controller_Throw;
        public InputAction @Aim => m_Wrapper.m_Player2Controller_Aim;
        public InputAction @NextTarget => m_Wrapper.m_Player2Controller_NextTarget;
        public InputAction @PreviousTarget => m_Wrapper.m_Player2Controller_PreviousTarget;
        public InputActionMap Get() { return m_Wrapper.m_Player2Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2ControllerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer2ControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_Player2ControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2ControllerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Pickup.started += instance.OnPickup;
            @Pickup.performed += instance.OnPickup;
            @Pickup.canceled += instance.OnPickup;
            @ToggleSafety.started += instance.OnToggleSafety;
            @ToggleSafety.performed += instance.OnToggleSafety;
            @ToggleSafety.canceled += instance.OnToggleSafety;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Throw.started += instance.OnThrow;
            @Throw.performed += instance.OnThrow;
            @Throw.canceled += instance.OnThrow;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @NextTarget.started += instance.OnNextTarget;
            @NextTarget.performed += instance.OnNextTarget;
            @NextTarget.canceled += instance.OnNextTarget;
            @PreviousTarget.started += instance.OnPreviousTarget;
            @PreviousTarget.performed += instance.OnPreviousTarget;
            @PreviousTarget.canceled += instance.OnPreviousTarget;
        }

        private void UnregisterCallbacks(IPlayer2ControllerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Pickup.started -= instance.OnPickup;
            @Pickup.performed -= instance.OnPickup;
            @Pickup.canceled -= instance.OnPickup;
            @ToggleSafety.started -= instance.OnToggleSafety;
            @ToggleSafety.performed -= instance.OnToggleSafety;
            @ToggleSafety.canceled -= instance.OnToggleSafety;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Throw.started -= instance.OnThrow;
            @Throw.performed -= instance.OnThrow;
            @Throw.canceled -= instance.OnThrow;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @NextTarget.started -= instance.OnNextTarget;
            @NextTarget.performed -= instance.OnNextTarget;
            @NextTarget.canceled -= instance.OnNextTarget;
            @PreviousTarget.started -= instance.OnPreviousTarget;
            @PreviousTarget.performed -= instance.OnPreviousTarget;
            @PreviousTarget.canceled -= instance.OnPreviousTarget;
        }

        public void RemoveCallbacks(IPlayer2ControllerActions instance)
        {
            if (m_Wrapper.m_Player2ControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer2ControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_Player2ControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2ControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player2ControllerActions @Player2Controller => new Player2ControllerActions(this);
    public interface IPlayer2ControllerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
        void OnToggleSafety(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnNextTarget(InputAction.CallbackContext context);
        void OnPreviousTarget(InputAction.CallbackContext context);
    }
}
